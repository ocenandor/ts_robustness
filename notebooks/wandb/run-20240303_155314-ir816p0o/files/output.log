
device: cuda
C:\Users\User\anaconda3\Lib\site-packages\torch\nn\modules\rnn.py:878: UserWarning: RNN module weights are not part of single contiguous chunk of memory. This means they need to be compacted at every call, possibly greatly increasing memory usage. To compact weights again call flatten_parameters(). (Triggered internally at ..\aten\src\ATen\native\cudnn\RNN.cpp:982.)
  result = _VF.lstm(input, hx, self._flat_weights, self.bias, self.num_layers,
Current run is terminating due to exception: shape '[200000, 1]' is invalid for input of size 400
Engine run is terminating due to exception: shape '[200000, 1]' is invalid for input of size 400
[tensor([[-9.1629e-04, -3.3379e-01, -6.7317e-01,  ..., -3.3814e+00,
         -2.8678e+00, -2.1741e+00],
        [ 1.1179e-01, -4.7471e-01, -1.0399e+00,  ..., -1.6065e+00,
         -1.7672e+00, -1.8402e+00],
        [-3.1650e-01, -1.0273e+00, -1.4977e+00,  ...,  8.4828e-01,
          1.4557e+00,  1.7544e+00],
        ...,
        [ 3.6423e-01,  3.1899e-01,  2.5114e-01,  ...,  1.5410e-01,
         -1.7095e-01, -4.8627e-01],
        [ 1.6789e+00,  1.9266e+00,  2.1276e+00,  ..., -9.9703e-01,
         -1.1454e+00, -1.1512e+00],
        [ 2.3038e-01,  8.1217e-01,  1.4667e+00,  ...,  2.5514e-01,
         -2.5022e-01, -6.9860e-01]]), tensor([1., 0., 1., 1., 0., 1., 1., 0., 1., 1., 0., 0., 0., 1., 0., 1., 1., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 1., 0., 0., 0., 1.,
        1., 1., 0., 1., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 1., 0.,
        0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 1.,
        0., 1., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 1., 1., 1., 0., 1., 0.,
        1., 1.])]
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([128, 500])
torch.Size([64, 500])
(tensor([[-0.0018,  0.0256,  0.0230,  ..., -0.0252, -0.0231, -0.0248],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        ...,
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan]],
       grad_fn=<SqueezeBackward1>), (tensor([[nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
         nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
         nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
         nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
         nan, nan, nan, nan]], grad_fn=<SqueezeBackward1>), tensor([[nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
         nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
         nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
         nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
         nan, nan, nan, nan]], grad_fn=<SqueezeBackward1>)))
tensor([[ 0.0164,  0.0051,  0.0099,  ..., -0.0101,  0.0093,  0.0134],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        ...,
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan]],
       grad_fn=<SqueezeBackward1>)
torch.Size([128, 100])
tensor([[ 0.0328, -0.0434, -0.0213,  ..., -0.0191, -0.0235,  0.0019],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        ...,
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan]],
       grad_fn=<SqueezeBackward1>)
tensor([[-0.0479, -0.0054, -0.0037,  ..., -0.0279,  0.0453,  0.0276],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        ...,
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan]],
       grad_fn=<SqueezeBackward1>)
torch.Size([128, 500])
tensor([[ 0.0167,  0.0304, -0.0106,  ...,  0.0344, -0.0365,  0.0004],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        ...,
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan]],
       grad_fn=<SqueezeBackward1>)
torch.Size([128, 500])
tensor([[-0.0325,  0.0227, -0.0432,  ..., -0.0229, -0.0324, -0.0167],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        ...,
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan]],
       grad_fn=<SqueezeBackward1>)
torch.Size([128, 500])
torch.Size([128, 100])
torch.Size([128, 500])
torch.Size([128, 100])
torch.Size([128, 500])
torch.Size([128, 100])
torch.Size([128, 100])
torch.Size([128, 500])
torch.Size([128, 100])
torch.Size([128, 1])
torch.Size([128, 500])
torch.Size([128, 100])
torch.Size([128, 1])
torch.Size([128, 500])
torch.Size([128, 100])
tensor([[nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan],
        [nan]], grad_fn=<AddmmBackward0>)
torch.Size([128, 500])
tensor([[ 0.0040,  0.0055, -0.0383,  ...,  0.0113,  0.0151, -0.0032],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        ...,
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan]],
       grad_fn=<SqueezeBackward1>)
torch.Size([128, 500])
torch.Size([128, 100])
tensor([[ 0.8575,  0.9120,  0.9355,  ..., -0.4885, -0.4874, -0.3935],
        [-0.0269, -0.3441, -0.6836,  ..., -0.6661, -1.3591, -1.6847],
        [-1.1425, -0.9103, -0.7354,  ..., -0.7640, -0.7227, -0.6972],
        ...,
        [-0.0816, -0.0519, -0.0119,  ..., -1.3423, -1.0874, -0.7312],
        [-0.6464, -0.3019,  0.0514,  ...,  0.2750,  0.1770,  0.0900],
        [-1.5396, -1.5746, -1.4889,  ..., -0.9889, -0.4657,  0.0263]])
torch.Size([128, 100])
torch.Size([128, 500])
torch.Size([128, 100])
torch.Size([128, 500])
tensor([[-0.0260, -0.0055,  0.0133,  ...,  0.0107, -0.0023, -0.0008],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        ...,
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan],
        [    nan,     nan,     nan,  ...,     nan,     nan,     nan]],
